class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size();
        int n=nums2.size();
        int k=(m+n+1)/2;
        if((m+n+1)%2==0)
            return find_kth(nums1,m,nums2,n,k);
        else
            return (find_kth(nums1,m,nums2,n,k)+find_kth(nums1,m,nums2,n,k+1))/2;
    }
    
private:
    double find_kth(vector<int>& nums1, int m, vector<int>& nums2, int n, int k){
        if (m>n) return find_kth(nums2, n, nums1, m, k);
        if (m==0) return nums2[k-1];
        if (k==1) return min(nums1[0],nums2[0]);
        
        int i1=min(k/2, m), i2=k-i1;
        std::vector<int> sub1;
        std::vector<int> sub2;
        if(nums1[i1-1]<nums2[i2-1]){
            sub1.assign(nums1.begin()+i1,nums1.end());
            return find_kth(sub1, m-i1, nums2, n, k-i1);
        }
        else if(nums1[i1-1]>nums2[i2-1]){
            sub2.assign(nums2.begin()+i2,nums2.end());
            return find_kth(nums1, m, sub2, n-i2, k-i2);
        }
        else return nums1[i1-1];
    }
};
